{
  "version": 3,
  "file": "ng2-flatpickr.umd.min.js",
  "sources": [
    "ng://ng2-flatpickr/out/src/ng2-flatpickr.component.ts",
    "ng://ng2-flatpickr/out/src/ng2-flatpickr.directive.ts",
    "ng://ng2-flatpickr/out/src/ng2-flatpickr.module.ts"
  ],
  "sourcesContent": [
    "import { Component, ViewChild, AfterViewInit, forwardRef, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FlatpickrOptions } from './flatpickr-options.interface';\n\ndeclare var require: any;\n\nif(typeof window !== 'undefined'){\n    require( 'flatpickr' );\n}\n\n@Component({\n\tselector: 'ng2-flatpickr', \n\ttemplate: `\n\t\t<div class=\"ng2-flatpickr-input-container\" #flatpickr>\n\t\t\t<input class=\"ng2-flatpickr-input\" [placeholder]=\"placeholder\" type=\"text\" data-input>\n\t\t</div>`,\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: forwardRef( () => Ng2FlatpickrComponent ),\n\t\t\tmulti: true\n\t\t}\n\t]\n})\nexport class Ng2FlatpickrComponent implements AfterViewInit, ControlValueAccessor, OnChanges {\n\n\tprivate flatpickr: Object;\n\n\tprivate defaultFlatpickrOptions: FlatpickrOptions = {\n\t\twrap: true,\n\t\tclickOpens: true,\n\t\tonChange: ( selectedDates: any ) => { this.writeValue( selectedDates ); }\n\t};\n\n\t@ViewChild('flatpickr')\n\tflatpickrElement: any;\n\n\t@Input()\n\tconfig: FlatpickrOptions;\n\n\t@Input()\n\tplaceholder: string = \"\";\n\n\t@Input()\n\tsetDate: string | Date;\n\n\t///////////////////////////////////\n\n\twriteValue( value:any ) {\n\t\tthis.propagateChange( value );\n\t}\n\n\tregisterOnChange( fn: any ) {\n\t\tthis.propagateChange = fn;\n\t}\n\n\tregisterOnTouched() {}\n\n\tpropagateChange = ( _: any ) => {};\n\n\t///////////////////////////////////\n\n\tsetDateFromInput( date: any ) {\n\t\tthis.flatpickrElement.nativeElement._flatpickr.setDate( date, true );\n\t}\n\n\tngAfterViewInit() {\n\t\tif( this.config ) {\n\t\t\tObject.assign( this.defaultFlatpickrOptions, this.config );\n\t\t}\n\t\tthis.flatpickr = this.flatpickrElement.nativeElement.flatpickr( this.defaultFlatpickrOptions );\n\t\tif( this.setDate ) {\n\t\t\tthis.setDateFromInput( this.setDate );\n\t\t}\n\t}\n\n\tngOnChanges( changes: SimpleChanges ) {\n\t\tif( changes.hasOwnProperty( 'setDate' ) && changes[ 'setDate' ].currentValue ) {\n\t\t\tthis.setDateFromInput( changes[ 'setDate' ].currentValue );\n\t\t}\n\t}\n\n}",
    "import {\n\tAfterViewInit, Directive, ElementRef, EventEmitter, HostListener, Input,\n\tOnDestroy, OnInit, Output, Renderer\n} from '@angular/core';\nimport { ControlContainer, FormControl, NgControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { FlatpickrEvent } from './flatpickr-event.interface';\nimport { FlatpickrInstance } from './flatpickr-instance';\nimport { FlatpickrOptions } from './flatpickr-options.interface';\n\n@Directive({ selector: '[flatpickr]', exportAs: 'ng2-flatpickr' })\nexport class Ng2FlatpickrDirective implements AfterViewInit, OnDestroy, OnInit {\n\t/**\n\t * The flatpickr configuration as a single object of values.\n\t *\n\t * See https://chmln.github.io/flatpickr/options/ for full list.\n\t */\n\t@Input( 'flatpickr' ) public flatpickrOptions: FlatpickrOptions;\n\n\t/**\n\t * Exactly the same as date format, but for the altInput field.\n\t *\n\t * Default:  \"F j, Y\"\n\t */\n\t@Input( 'altFormat' ) public flatpickrAltFormat: string;\n\n\t/**\n\t * Show the user a readable date (as per altFormat), but return something\n\t * totally different to the server.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'altInput' ) public flatpickrAltInput: boolean;\n\n\t/**\n\t * This class will be added to the input element created by the altInput\n\t * option.\n\t *\n\t * Default:  \"\"\n\t */\n\t@Input( 'altInputClass' ) public flatpickrAltInputClass: string;\n\n\t/**\n\t * Allows the user to enter a date directly input the input field. By\n\t * default, direct entry is disabled.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'allowInput' ) public flatpickrAllowInput: boolean;\n\n\t/**\n\t * Instead of body, appends the calendar to the specified node instead.\n\t *\n\t * Default:  null\n\t */\n\t@Input( 'appendTo' ) public flatpickrAppendTo: HTMLElement;\n\n\t/**\n\t * Whether clicking on the input should open the picker.\n\t * You could disable this if you wish to open the calendar manually\n\t * with.open().\n\t *\n\t * Default:  true\n\t */\n\t@Input( 'clickOpens' ) public flatpickrClickOpens: boolean;\n\n\t/**\n\t * A string of characters which are used to define how the date will be\n\t * displayed in the input box.\n\t * See https://chmln.github.io/flatpickr/formatting/ for supported tokens.\n\t *\n\t * Default:  \"Y-m-d\"\n\t */\n\t@Input( 'dateFormat' ) public flatpickrDateFormat: string;\n\n\t/**\n\t * Sets the initial selected date(s).\n\t *\n\t * If you're using {mode: \"multiple\"} or a range calendar supply an Array of\n\t * Date objects or an Array of date strings which follow your dateFormat.\n\t *\n\t * Otherwise, you can supply a single Date object or a date string.\n\t *\n\t * Default:  null\n\t */\n\t@Input( 'defaultDate' ) public flatpickrDefaultDate: string | Date;\n\n\t/**\n\t * Disable an array of specific dates, date ranges, or functions to disable\n\t * dates. See https://chmln.github.io/flatpickr/examples/#disabling-specific-dates\n\t *\n\t * Default:  []\n\t */\n\t@Input( 'disable' ) public flatpickrDisable: string[] | Date[];\n\n\t/**\n\t * Set disableMobile to true to always use the non-native picker. By\n\t * default, Flatpickr utilizes native datetime widgets unless certain\n\t * options (e.g. disable) are used.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'disableMobile' ) public flatpickrDisableMobile: boolean;\n\n\t/**\n\t * Enable an array of specific dates, date ranges, or functions to enable\n\t * dates. See https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few\n\t *\n\t * Default:  []\n\t */\n\t@Input( 'enable' ) public flatpickrEnable: string[] | Date[];\n\n\t/**\n\t * Enables time picker.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'enableTime' ) public flatpickrEnableTime: boolean;\n\n\t/**\n\t * Enables seconds in the time picker.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'enableSeconds' ) public flatpickrEnableSeconds: boolean;\n\n\t/**\n\t * Adjusts the step for the hour input (incl. scrolling).\n\t *\n\t * Default:  1\n\t */\n\t@Input( 'hourIncrement' ) public flatpickrHourIncrement: number;\n\n\t/**\n\t * Displays the calendar inline.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'inline' ) public flatpickrInline: boolean;\n\n\t/**\n\t * Use a specific locale for the flatpickr instance.\n\t *\n\t * Default:  null\n\t */\n\t@Input( 'locale' ) public flatpickrLocale: Object;\n\n\t/**\n\t * The maximum date that a user can pick to (inclusive).\n\t *\n\t * Default:  null\n\t */\n\t@Input( 'maxDate' ) public flatpickrMaxDate: string | Date;\n\n\t/**\n\t * The minimum date that a user can start picking from (inclusive).\n\t *\n\t * Default:  null\n\t */\n\t@Input( 'minDate' ) public flatpickrMinDate: string | Date;\n\n\t/**\n\t * Adjusts the step for the minute input (incl. scrolling).\n\t *\n\t * Default:  5\n\t */\n\t@Input( 'minuteIncrement' ) public flatpickrMinuteIncrement: number;\n\n\t/**\n\t * \"single\", \"multiple\", or \"range\"\n\t *\n\t * Default:  \"single\"\n\t */\n\t@Input( 'mode' ) public flatpickrMode: string;\n\n\t/**\n\t * HTML for the arrow icon, used to switch months.\n\t *\n\t * Default:  \">\"\n\t */\n\t@Input( 'nextArrow' ) public flatpickrNextArrow: string;\n\n\t/**\n\t * Hides the day selection in calendar. Use it along with enableTime to\n\t * create a time picker.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'noCalendar' ) public flatpickrNoCalendar: boolean;\n\n\t/**\n\t * Function that expects a date string and must return a Date object.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'parseDate' ) public flatpickrParseDate: Function;\n\n\t/**\n\t * HTML for the left arrow icon.\n\t *\n\t * Default:  \"<\"\n\t */\n\t@Input( 'prevArrow' ) public flatpickrPrevArrow: string;\n\n\t/**\n\t * Show the month using the shorthand version (ie, Sep instead of September).\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'shorthandCurrentMonth' ) public flatpickrShorthandCurrentMonth: boolean;\n\n\t/**\n\t * Position the calendar inside the wrapper and next to the input element\n\t * (Leave false unless you know what you're doing).\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'static' ) public flatpickrStatic: boolean;\n\n\t/**\n\t * Displays time picker in 24 hour mode without AM/PM selection when enabled.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'time_24hr' ) public flatpickrTime_24hr: boolean;\n\n\t@Input( 'utc' ) public flatpickrUtc: boolean;\n\n\t/**\n\t * Enables display of week numbers in calendar.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'weekNumbers' ) public flatpickrWeekNumbers: boolean;\n\n\t/**\n\t * Custom elements and input groups.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'wrap' ) public flatpickrWrap: boolean;\n\n\t/**\n\t * onChange gets triggered when the user selects a date, or changes the time on a selected date.\n\t *\n\t * Default:  null\n\t */\n\t@Output( 'onChange' ) public flatpickrOnChange: EventEmitter<FlatpickrEvent> = new EventEmitter();\n\n\t/**\n\t * onClose gets triggered when the calendar is closed.\n\t *\n\t * Default:  null\n\t */\n\t@Output( 'onClose' ) public flatpickrOnClose: EventEmitter<FlatpickrEvent> = new EventEmitter();\n\n\t/**\n\t * onOpen gets triggered when the calendar is opened.\n\t *\n\t * Default:  null\n\t */\n\t@Output( 'onOpen' ) public flatpickrOnOpen: EventEmitter<FlatpickrEvent> = new EventEmitter();\n\n\t/**\n\t * onReady gets triggered once the calendar is in a ready state.\n\t *\n\t * Default:  null\n\t */\n\t@Output( 'onReady' ) public flatpickrOnReady: EventEmitter<FlatpickrEvent> = new EventEmitter();\n\n\t/** Allow double-clicking on the control to open/close it. */\n\t@HostListener( 'dblclick' )\n\tpublic onClick() {\n\t\tthis.flatpickr.toggle();\n\t}\n\n\tprotected globalOnChange: Function;\n\tprotected globalOnClose: Function;\n\tprotected globalOnOpen: Function;\n\tprotected globalOnReady: Function;\n\n\tprotected flatpickr: FlatpickrInstance;\n\tprotected formControlListener: Subscription;\n\n\t/** Allow access properties using index notation */\n\t[key:string]: any;\n\n\tconstructor(\n\t\tprotected parent: ControlContainer,\n\t\tprotected ngControl: NgControl,\n\t\tprotected element: ElementRef,\n\t\tprotected renderer: Renderer\n\t) {}\n\n\tget control(): FormControl {\n\t\treturn this.parent ? this.parent.formDirective.getControl(this.ngControl) : null;\n\t}\n\n\tngAfterViewInit() {\n\t\t/** We cannot initialize the flatpickr instance in ngOnInit(); it will\n\t\t\trandomize the date when the form control initializes. */\n\t\tlet nativeElement = this.element.nativeElement;\n\n\t\tif (typeof nativeElement === 'undefined' || nativeElement === null) {\n\t\t\tthrow 'Error: invalid input element specified';\n\t\t}\n\n\t\tif (this.flatpickrOptions.wrap) {\n\t\t\tthis.renderer.setElementAttribute( this.element.nativeElement, 'data-input', '' );\n\t\t\tnativeElement = nativeElement.parentNode;\n\t\t}\n\n\t\tthis.flatpickr = <FlatpickrInstance>nativeElement.flatpickr( this.flatpickrOptions );\n\t}\n\n\tngOnDestroy() {\n\t\tif (this.flatpickr) {\n\t\t\tthis.flatpickr.destroy();\n\t\t}\n\n\t\tif (this.formControlListener) {\n\t\t\tthis.formControlListener.unsubscribe();\n\t\t\tthis.formControlListener = undefined;\n\t\t}\n\n\t\tthis.flatpickrOnChange = undefined;\n\t\tthis.flatpickrOnClose = undefined;\n\t\tthis.flatpickrOnOpen = undefined;\n\t\tthis.flatpickrOnReady = undefined;\n\t}\n\n\tngOnInit() {\n\t\tthis.globalOnChange = this.flatpickrOptions.onChange;\n\t\tthis.globalOnClose = this.flatpickrOptions.onClose;\n\t\tthis.globalOnOpen = this.flatpickrOptions.onOpen;\n\t\tthis.globalOnReady = this.flatpickrOptions.onReady;\n\n\t\tthis.flatpickrOptions = {\n\t\t\taltFormat: this.getOption('altFormat'),\n\t\t\taltInput: this.getOption('altInput'),\n\t\t\taltInputClass: this.getOption('altInputClass'),\n\t\t\tallowInput: this.getOption('allowInput'),\n\t\t\tappendTo: this.getOption('appendTo'),\n\t\t\tclickOpens: this.getOption('clickOpens', true),\n\t\t\tdateFormat: this.getOption('dateFormat'),\n\t\t\tdefaultDate: this.getOption('defaultDate'),\n\t\t\tdisable: this.getOption('disable'),\n\t\t\tdisableMobile: this.getOption('disableMobile'),\n\t\t\tenable: this.getOption('enable'),\n\t\t\tenableTime: this.getOption('enableTime'),\n\t\t\tenableSeconds: this.getOption('enableSeconds'),\n\t\t\thourIncrement: this.getOption('hourIncrement'),\n\t\t\tinline: this.getOption('inline'),\n\t\t\tlocale: this.getOption('locale'),\n\t\t\tmaxDate: this.getOption('maxDate'),\n\t\t\tminDate: this.getOption('minDate'),\n\t\t\tminuteIncrement: this.getOption('minuteIncrement'),\n\t\t\tmode: this.getOption('mode'),\n\t\t\tnextArrow: this.getOption('nextArrow'),\n\t\t\tnoCalendar: this.getOption('noCalendar'),\n\t\t\tonChange: this.eventOnChange,\n\t\t\tonClose: this.eventOnClose,\n\t\t\tonOpen: this.eventOnOpen,\n\t\t\tonReady: this.eventOnReady,\n\t\t\tparseDate: this.getOption('parseDate'),\n\t\t\tprevArrow: this.getOption('prevArrow'),\n\t\t\tshorthandCurrentMonth: this.getOption('shorthandCurrentMonth'),\n\t\t\tstatic: this.getOption('static'),\n\t\t\ttime_24hr: this.getOption('time_24hr'),\n\t\t\tutc: this.getOption('utc'),\n\t\t\tweekNumbers: this.getOption('weekNumbers'),\n\t\t\twrap: this.getOption('wrap', true),\n\t\t};\n\n\t\t// Remove unset properties\n\t\tObject.keys( this.flatpickrOptions ).forEach( ( key: string ) => {\n\t\t\t(this.flatpickrOptions[key] === undefined) &&\n\t\t\t\tdelete this.flatpickrOptions[key];\n\t\t} );\n\n\t\tif (this.control) {\n\t\t\tthis.formControlListener = this.control.valueChanges\n\t\t\t\t.subscribe( ( value: any ) => {\n\t\t\t\t\tif ( !( value instanceof Date ) ) {\n\t\t\t\t\t\t// Quietly update the value of the form control to be a\n\t\t\t\t\t\t// Date object. This avoids any external subscribers\n\t\t\t\t\t\t// from being notified a second time (once for the user\n\t\t\t\t\t\t// initiated event, and once for our conversion to\n\t\t\t\t\t\t// Date()).\n\t\t\t\t\t\tthis.control.setValue( new Date( '' + value ), {\n\t\t\t\t\t\t\tonlySelf: true,\n\t\t\t\t\t\t\temitEvent: false,\n\t\t\t\t\t\t\temitModelToViewChange: false,\n\t\t\t\t\t\t\temitViewToModelChange: false\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Fire off the event emitter for the directive element, and also for the\n\t * global onChange callback, if defined.\n\t */\n\tprotected eventOnChange( selectedDates: Date[], dateStr: string, instance: Object ): void {\n\t\tlet event: FlatpickrEvent = {\n\t\t\tselectedDates: selectedDates,\n\t\t\tdateStr: dateStr,\n\t\t\tinstance: instance\n\t\t};\n\t\tif ( this.flatpickrOnChange ) {\n\t\t\tthis.flatpickrOnChange.emit( event );\n\t\t}\n\t\tif( this.globalOnChange ) {\n\t\t\tthis.globalOnChange( event );\n\t\t}\n\t}\n\n\t/**\n\t * Fire off the event emitter for the directive element, and also for the\n\t * global onClose callback, if defined.\n\t */\n\tprotected eventOnClose( selectedDates: Date[], dateStr: string, instance: Object ): void {\n\t\tlet event: FlatpickrEvent = {\n\t\t\tselectedDates: selectedDates,\n\t\t\tdateStr: dateStr,\n\t\t\tinstance: instance\n\t\t};\n\t\tif ( this.flatpickrOnClose ) {\n\t\t\tthis.flatpickrOnClose.emit( event );\n\t\t}\n\t\tif( this.globalOnClose ) {\n\t\t\tthis.globalOnClose( event );\n\t\t}\n\t}\n\n\t/**\n\t * Fire off the event emitter for the directive element, and also for the\n\t * global onOpen callback, if defined.\n\t */\n\tprotected eventOnOpen( selectedDates: Date[], dateStr: string, instance: Object ): void {\n\t\tlet event: FlatpickrEvent = {\n\t\t\tselectedDates: selectedDates,\n\t\t\tdateStr: dateStr,\n\t\t\tinstance: instance\n\t\t};\n\t\tif ( this.flatpickrOnOpen ) {\n\t\t\tthis.flatpickrOnOpen.emit( event );\n\t\t}\n\t\tif( this.globalOnOpen ) {\n\t\t\tthis.globalOnOpen( event );\n\t\t}\n\t}\n\n\t/**\n\t * Fire off the event emitter for the directive element, and also for the\n\t * global onReady callback, if defined.\n\t */\n\tprotected eventOnReady( selectedDates: Date[], dateStr: string, instance: Object ): void {\n\t\tlet event: FlatpickrEvent = {\n\t\t\tselectedDates: selectedDates,\n\t\t\tdateStr: dateStr,\n\t\t\tinstance: instance\n\t\t};\n\t\tif ( this.flatpickrOnReady ) {\n\t\t\tthis.flatpickrOnReady.emit( event );\n\t\t}\n\t\tif( this.globalOnReady ) {\n\t\t\tthis.globalOnReady( event );\n\t\t}\n\t}\n\n\t/**\n\t * Return the configuration value for option {option}, or {defaultValue} if it\n\t * doesn't exist.\n\t */\n\tprotected getOption( option: string, defaultValue?: any ): any {\n\t\tlet localName = 'flatpickr' + option.substring( 0, 1 ).toUpperCase()\n\t\t\t+ option.substring( 1 );\n\n\t\tif ( typeof this[localName] !== 'undefined' ) {\n\t\t\treturn this[localName];\n\t\t} else if ( typeof this.flatpickrOptions[option] !== 'undefined' ) {\n\t\t\treturn this.flatpickrOptions[option];\n\t\t} else {\n\t\t\treturn defaultValue;\n\t\t}\n\t}\n}\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Ng2FlatpickrComponent } from './ng2-flatpickr.component';\nimport { Ng2FlatpickrDirective } from './ng2-flatpickr.directive';\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [\n        Ng2FlatpickrComponent,\n        Ng2FlatpickrDirective\n    ],\n    exports: [\n        Ng2FlatpickrComponent,\n        Ng2FlatpickrDirective\n    ]\n})\nexport class Ng2FlatpickrModule {\n}"
  ],
  "names": [
    "window",
    "require",
    "Ng2FlatpickrComponent",
    "this",
    "defaultFlatpickrOptions",
    "wrap",
    "clickOpens",
    "onChange",
    "selectedDates",
    "_this",
    "writeValue",
    "placeholder",
    "propagateChange",
    "_",
    "prototype",
    "value",
    "registerOnChange",
    "fn",
    "registerOnTouched",
    "setDateFromInput",
    "date",
    "flatpickrElement",
    "nativeElement",
    "_flatpickr",
    "setDate",
    "ngAfterViewInit",
    "config",
    "Object",
    "assign",
    "flatpickr",
    "ngOnChanges",
    "changes",
    "hasOwnProperty",
    "currentValue",
    "type",
    "Component",
    "args",
    "selector",
    "template",
    "providers",
    "provide",
    "NG_VALUE_ACCESSOR",
    "useExisting",
    "forwardRef",
    "multi",
    "ViewChild",
    "Input",
    "Ng2FlatpickrDirective",
    "parent",
    "ngControl",
    "element",
    "renderer",
    "flatpickrOnChange",
    "EventEmitter",
    "flatpickrOnClose",
    "flatpickrOnOpen",
    "flatpickrOnReady",
    "onClick",
    "toggle",
    "defineProperty",
    "get",
    "formDirective",
    "getControl",
    "flatpickrOptions",
    "setElementAttribute",
    "parentNode",
    "ngOnDestroy",
    "destroy",
    "formControlListener",
    "unsubscribe",
    "undefined",
    "ngOnInit",
    "globalOnChange",
    "globalOnClose",
    "onClose",
    "globalOnOpen",
    "onOpen",
    "globalOnReady",
    "onReady",
    "altFormat",
    "getOption",
    "altInput",
    "altInputClass",
    "allowInput",
    "appendTo",
    "dateFormat",
    "defaultDate",
    "disable",
    "disableMobile",
    "enable",
    "enableTime",
    "enableSeconds",
    "hourIncrement",
    "inline",
    "locale",
    "maxDate",
    "minDate",
    "minuteIncrement",
    "mode",
    "nextArrow",
    "noCalendar",
    "eventOnChange",
    "eventOnClose",
    "eventOnOpen",
    "eventOnReady",
    "parseDate",
    "prevArrow",
    "shorthandCurrentMonth",
    "static",
    "time_24hr",
    "utc",
    "weekNumbers",
    "keys",
    "forEach",
    "key",
    "control",
    "valueChanges",
    "subscribe",
    "Date",
    "setValue",
    "onlySelf",
    "emitEvent",
    "emitModelToViewChange",
    "emitViewToModelChange",
    "dateStr",
    "instance",
    "event",
    "emit",
    "option",
    "defaultValue",
    "localName",
    "substring",
    "toUpperCase",
    "Directive",
    "exportAs",
    "ControlContainer",
    "NgControl",
    "ElementRef",
    "Renderer",
    "flatpickrAltFormat",
    "flatpickrAltInput",
    "flatpickrAltInputClass",
    "flatpickrAllowInput",
    "flatpickrAppendTo",
    "flatpickrClickOpens",
    "flatpickrDateFormat",
    "flatpickrDefaultDate",
    "flatpickrDisable",
    "flatpickrDisableMobile",
    "flatpickrEnable",
    "flatpickrEnableTime",
    "flatpickrEnableSeconds",
    "flatpickrHourIncrement",
    "flatpickrInline",
    "flatpickrLocale",
    "flatpickrMaxDate",
    "flatpickrMinDate",
    "flatpickrMinuteIncrement",
    "flatpickrMode",
    "flatpickrNextArrow",
    "flatpickrNoCalendar",
    "flatpickrParseDate",
    "flatpickrPrevArrow",
    "flatpickrShorthandCurrentMonth",
    "flatpickrStatic",
    "flatpickrTime_24hr",
    "flatpickrUtc",
    "flatpickrWeekNumbers",
    "flatpickrWrap",
    "Output",
    "HostListener",
    "Ng2FlatpickrModule",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports"
  ],
  "mappings": "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"
}
